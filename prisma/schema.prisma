generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String    @id
    hashed_password String
    user            String    @unique
    likes           Like[]
    posts           Post[]
    replies         Reply[]
    events          Event[]
    sessions        Session[]
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ingredient {
    id       String @id @default(uuid())
    recipeId String
    name     String
    quantity Float
    unit     String
    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Recipe {
    id          String       @id @default(uuid())
    title       String
    body        String
    postId      String       @unique
    ingredients Ingredient[]
    Post        Post         @relation(fields: [postId], references: [id])
}

model Reply {
    id        String   @id @default(uuid())
    userId    String
    postId    String
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
    userId String
    postId String
    Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, postId])
}

model Post {
    id        String   @id @default(uuid())
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    likes     Like[]
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    recipe    Recipe?
    replies   Reply[]
}

model Event {
    id        String   @id @default(uuid())
    userId    String
    title     String
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
